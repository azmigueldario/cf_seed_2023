/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for Eagle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

params {
        // Define max resource allocations based on available compute resources on Eagle
    max_cpus        = 8
    max_memory      = '90.GB'
    max_time        = '12.h'
    
        // perform short reads de-hosting by default against human reference (Eagle HPC path)
    perform_shortread_hostremoval   = true
    hostremoval_reference           = "/mnt/cidgoh-object-storage/database/reference_genomes/human/GRCh38.p14/GCF_000001405.40/GCF_000001405.40_GRCh38.p14_genomic.fna"
    shortread_hostremoval_index     = "/mnt/cidgoh-object-storage/database/reference_genomes/human/GRCh38.p14/GCF_000001405.40"
        
        // For taxpasta standardization in Eagle HPC
    taxpasta_taxonomy_dir                   = "/mnt/cidgoh-object-storage/database/kraken2/taxdump"
    taxpasta_add_name                       = true
    taxpasta_add_rank                       = true
    taxpasta_add_lineage                    = true
    
        // run krona by default
    run_krona                  = true
    }

process {
        // execute with slurm in Eagle HPC
    executor = 'slurm' 
    pollInterval = '60 sec'
    submitRateLimit = '18/60min'
    queueSize = 10 

        // minimize memory required for a job
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
        // Kraken2 requires enough ram space to load a large database (70 GB)
    withName: KRAKEN2_KRAKEN2 {
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
    }    
    withName: TAXPASTA_MERGE {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
            //  Increase memory for TAXPASTA
        memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
            // Update to last container if using -r 1.0.1 
        container = "https://depot.galaxyproject.org/singularity/taxpasta:0.4.1--pyhdfd78af_0"
    }
        //  MultiQC also requires high memory apparently
    withName: MULTIQC {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


